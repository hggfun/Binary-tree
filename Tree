#include <iostream>

struct Node {
    int value;
    Node *max;
    Node *min;
};

class Tree {
public:
    Tree() {
        seed = nullptr;
    }

    ~Tree() {
        if (seed != nullptr) {
            del(seed);
        }
    }

    void insert(int value) {
        if (seed == nullptr) {
            seed = new Node;
            seed->value = value;
            seed->max = nullptr;
            seed->min = nullptr;
        } else {
            if (value != seed->value) {
                if (value < seed->value) {
                    insert(value, seed->min);
                } else {
                    insert(value, seed->max);
                }
            }
        }
    }

    void insert(int value, Node *&node) {
        if (node == nullptr) {
            node = new Node;
            node->value = value;
            node->max = nullptr;
            node->min = nullptr;
            return;
        } else {
            if (value != node->value) {
                if (value < node->value) {
                    insert(value, node->min);
                } else {
                    insert(value, node->max);
                }
            }
        }
    }

    void showMeYourNodes(Node *&node) {
        if (node == nullptr) {
            return;
        }
        if (node->min != nullptr) {
            showMeYourNodes(node->min);
        }
        std::cout << node->value << "\n";
        if (node->max != nullptr) {
            showMeYourNodes(node->max);
        }
    }

    void showMeYourLeaves(Node*& node) {
        if (node == nullptr) {
            return;
        }
        if (node->min != nullptr) {
            showMeYourLeaves(node->min);
        }
        if (node->max != nullptr) {
            showMeYourLeaves(node->max);
        } else if (node->min == nullptr) {
            std::cout << node->value << "\n";
        }
    }

    int max(Node* node) {
        while (node->max != nullptr) {
            node = node->max;
        }
        return node->value;
    }

    int max2() {
        int prev;
        auto nd = seed;
        while (nd->max != nullptr) {
            prev = nd->value;
            nd = nd->max;
        }
        if (nd->min == nullptr) {
            return prev;
        } else {
            return max(nd->min);
        }
    }

    Node *seed;

private:
    void del(Node *&node) {
        if (node->min != nullptr) {
            del(node->min);
        }
        if (node->max != nullptr) {
            del(node->max);
        }
        delete node;
    }
};
